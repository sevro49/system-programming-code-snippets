#include <stdio.h>


typedef struct{
    unsigned int size:31; // 31 bit size tutmak icin
    unsigned int free:1; // 1 bit free durumu icin
} info;

int *heap_start;
int *heap_end;

initheap(){
    heap_start = sbrk(0);
    heap_end = sbrk(1024);
}

int mymalloc(int size){
    static int start = 0;
    if(!start){
        start = 1;
        initheap();
    }

    info *block = heap_start;
    while(block < heap_end - size && block->free == 0){
        /* bir sonraki block bulma*/
        block = (char*)block + sizeof(info) + block->size;
        /* byte ile işlem yaptığımız için block'u
        char pointer'a çevirdik. 1 yer kapliyor cünkü char
        int olsaydi 4 4 ilerlerdi
        
        sizeof(info) = free olup olmadığını gosteren
        en baştaki 1 bit

        block->size = alanın geriye kalan kısmını gösterir
        */
    }
    if(block < heap_end){
        split(block, size); /* kullanıcıya verdigimiz alan haricindeki
        alani tutmak icin*/

        block->free = 1;
        block->size = size; /* kullanıcının istediği kadar 
        size vermek icin*/
        return (char *)block + sizeof(info);   

    }
}

int split(info *block, int size){
    info *b = (char *)block + sizeof(info) + block->size;
    /* yeni bloğun adresi*/

    b->free = 0;
    b->size = block->size - size - sizeof(info);
    /* yeni block*/

    return b;
}

int main(void){
    info a;
    a.free = 1;
    a.size = 128;
    
    printf("size: %d - %d - %d \n", sizeof(info), a.size, a.free);

    int *a = mymalloc(sizeof(int)*100);
}
